Configure before using Git:
	git config --global user.name "Your name"
	git config --global user.email "Your email"
Check your configuration:
	git config --list


Make repositories
	git init                       
Add files that needs version control
	git add <YourFileName>    
	git commit -m "Modify message"
Check status
	git status
Reset the file that u dont wanna track
	git reset HEAD <file>
	git reset HEAD
Discard the changes(Dangerous command)
	git checkout -- <file>

在这三棵树中可以有三个不同版本的文件

Check 'commit' history log
	git log


Reset:
	git reset HEAD~   回到上一个版本
	                  git log 是一个单向链表，所以此时看不见“未来”的快照
	git reset HEAD~~  回到上两个
	git reset HEAD~10 回到上10个
 Return back	
	git reset --mixed HEAD~  [default]
							 移动HEAD的指向，将移动后的快照回滚到暂存区
	
	git reset --soft HEAD~   移动HEAD，指向上一个
	
	git reset --hard HEAD~   移动HEAD,回滚暂存区，
							 再将暂存区文件还原到工作区
	git reset 版本快照 文件名/路径
 Return to future
 	git reflog   			 查看分支操作记录
	git reset [--option] commitid   commmitid是git reflog中对应的commitid


Diff:
	git diff     比较暂存区域与工作目录
	git diff commitid1 commitid2  比较两次历史快照
								  其中commitid1为+ commitid2为-
	git diff commitid             比较工作目录与快照
	git diff HEAD                 比较比较工作目录与最新快照
	git diff --cached  commitid   比较暂存区域与仓库快照
					   HEAD       同理
	-开头的行，是只出现在源文件中的行
	+开头的行，是只出现在目标文件中的行
	空格开头的行，是源文件和目标文件中都出现的行
	差异按照差异小结进行组织，每个差异小结的第一行都是定位语句，由@@开头，@@结尾。

	
	diff --git a/learnDiff b/learnDiff   //比较暂存区域和工作区域的路径
	index dc72bde..00aecca 100644        //指定类型文件Hash   权限
	--- a/learnDiff                      // 暂存区旧文件,变动前
	+++ b/learnDiff						 //工作区新文件,变动后
	@@ -2,6 +2,6 @@					     //在源文件第2行开始的6行和目标文件第2行开始的6行构成一个差异小结

    如果出现  ':'  表示没有显示完，
	 j:下一行 k:上一行 f:下一页  b:上一页  d:下半页  u:上半页 
	 g:第一行 G:最后一行   其他看vim教程
	 h:帮助文档


Amend:
	修复log,但是不新建快照
	git commit --amend [-m] 

Rm:
	git rm <file>	     只是删除工作目录和暂存区域的文件，就是取消跟踪，下次提交不纳入版本管理	再git reset --soft HEAD~
	git rm -f <file>     当工作区域混合暂存区同名文件内容不同，用-f强制删除
	git rm --cached <file>     只删除暂存区文件（保留工作目录）

Mv:
	git mv oldname  newname   更改文件名



Git 分支	
  Create branch:
	git branch branchName
	git log --decorate --oneline   	--decorate 显示指向这个分支的所有引用
 									--oneline  每个说明只有一行
									--all      显示所有
									--graph    图像显示
  Checkout branch:
    git checkout branchName
  Create and checkout branch
  	git checkout -b branchName
  Merge:
  	git merge branchName      将branchName分支合并到当前分支
							  有时会产生冲突，此时这两个文件中会被git标记

  Delete:
  	git branch -d branchName  		或者用--delete


